import {
	Message,
	SendMessageOptions,
	KeyboardButton,
} from "node-telegram-bot-api";
import TelegramBot from "../servises/telefram-service";
import WeatherService from "../servises/weather-service";
import { IWeatherData } from "../types";

class BotController {
	constructor() {
		this.setCommands();
	}

	async setCommands() {
		await TelegramBot.setMyCommands([
			{ command: "/kyiv", description: "–®–æ –ø–æ –ø–æ–≥–æ–¥—ñ –≤ –ö–∏—î–≤—ñ" },
			{ command: "/location", description: "–ü–æ–≥–æ–¥–∞ –∑–∞ –º–∞–ø–æ—é" },
		]);
	}

	setReplyKeyboard(): SendMessageOptions {
		const keyboard: KeyboardButton[][] = [];

		keyboard.push(
			[
				{
					text: "–®–æ –ø–æ –ø–æ–≥–æ–¥—ñ –≤ –ö–∏—î–≤—ñ",
				},
			],
			// [
			// 	{
			// 		text: "–ü–æ–≥–æ–¥–∞ –∑–∞ –º–∞–ø–æ—é",
			// 	},
			// ],
		);

		return {
			reply_markup: {
				resize_keyboard: true,
				keyboard,
			},
		};
	}

	static weathersToString(location: string, weathers: IWeatherData[]) {
		let weatherString = `${location ? `${location}:` : ""}`;

		weatherString += weathers.reduce((wS, weather) => {
			const { temperature, realFeelTemperature, wind, name } = weather;
			wS += `\n\n${name}\n`;
			wS += `üå°Ô∏è ${temperature}¬∞C`;

			if (realFeelTemperature) {
				wS += `, ü§í ${realFeelTemperature}¬∞C`;
			}

			if (wind) {
				wS += `, üí® ${wind} –º/—Å`;
			}

			return wS;
		}, "");

		return weatherString;
	}

	async sendError(chatId: number) {
		await TelegramBot.sendMessage(chatId, `–ü–æ–º–∏–ª–æ—á–∫–∞  ¬Ø\\_(„ÉÑ)_/¬Ø`);
	}

	async sendLoading(chatId: number, options?: SendMessageOptions) {
		await TelegramBot.sendMessage(
			chatId,
			`–ß–µ–∫–∞–π—Ç–µ, –∑–±–∏—Ä–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...`,
			options,
		);
	}

	async onStart(chatId: number) {
		await this.setCommands();
		return await TelegramBot.sendMessage(
			chatId,
			`–í—ñ—Ç–∞—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ –ø–æ–≥–æ–¥–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é "–ú–µ–Ω—é" –∞–±–æ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É, —â–æ–± —â–æ—Å—å –∑—Ä–æ–±–∏—Ç–∏.`,
			this.setReplyKeyboard(),
		);
	}

	async onKyiv(chatId: number) {
		await this.sendLoading(chatId);

		const KyivWeathers = await WeatherService.getAllKyivWeathers();

		if (!KyivWeathers.length) {
			return await this.sendError(chatId);
		}

		return await TelegramBot.sendMessage(
			chatId!,
			BotController.weathersToString("–ö–∏—ó–≤", KyivWeathers),
			{ ...this.setReplyKeyboard(), parse_mode: "Markdown" },
		);
	}

	async onMap(chatId: number) {
		return await TelegramBot.sendMessage(
			chatId!,
			`–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å\n–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤–∞—à–µ—é –ª–æ–∫–∞—Ü—ñ—î—é\n(–ó–∞–¥—ñ—è–Ω–æ –º–µ–Ω—à–µ –¥–∂–µ—Ä–µ–ª)`,
			{
				parse_mode: "Markdown",
				reply_markup: {
					one_time_keyboard: true,
					resize_keyboard: true,
					keyboard: [[{ text: "–ú–æ—è –ª–æ–∫–∞—Ü—ñ—è", request_location: true }]],
				},
			},
		);
	}

	async onMessage(msg: Message) {
		const {
			text,
			chat: { id: chatId },
		} = msg;

		try {
			switch (text) {
				case "/start":
					return await this.onStart(chatId);
				case "/kyiv":
				case "–®–æ –ø–æ –ø–æ–≥–æ–¥—ñ –≤ –ö–∏—î–≤—ñ":
					return await this.onKyiv(chatId);
				case "/location":
				case "–ü–æ–≥–æ–¥–∞ –∑–∞ –º–∞–ø–æ—é":
					return await this.onMap(chatId);
				default:
					return;
			}
		} catch (e) {
			console.log(e);
		}
	}

	async onLocation(msg: Message) {
		const location = msg.location;
		const chatId = msg.chat.id;

		if (!location) {
			return await this.sendError(chatId);
		}

		await this.sendLoading(chatId, {
			reply_markup: {
				remove_keyboard: true,
			},
		});

		const weathers = await WeatherService.getWeathers(
			location.latitude,
			location.longitude,
		);

		if (!weathers.length) {
			return await this.sendError(chatId);
		}

		return await TelegramBot.sendMessage(
			chatId!,
			BotController.weathersToString("", weathers),
			{ ...this.setReplyKeyboard(), parse_mode: "Markdown" },
		);
	}
}

export default new BotController();
