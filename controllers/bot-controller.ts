import { Message } from "node-telegram-bot-api";
import { bot } from "../servises/telefram-service";
import WeatherService from "../servises/weather-service";
import { IWeatherData } from "../types";

// all chat icons ‚ùÑ‚òî‚õÖüëÖüí®üåû‚òÅüìçüå°Ô∏èü§í

class BotController {
	constructor() {
		bot.setMyCommands([
			{ command: "/start", description: "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞" },
			{ command: "/kyiv", description: "–®–æ –ø–æ –ø–æ–≥–æ–¥—ñ –≤ –ö–∏—î–≤—ñ" },
			{ command: "/location", description: "–ü–æ–≥–æ–¥–∞ –∑–∞ –º–∞–ø–æ—é" },
		]);
	}

	static weathersToString(location: string, weathers: IWeatherData[]) {
		let weatherString = `${location ? `${location}:` : ""}`;

		weatherString += weathers.reduce((wS, weather) => {
			const { temperature, realFeelTemperature, wind, name } = weather;
			wS += `\n\n${name}\n`;
			wS += `üå°Ô∏è ${temperature}¬∞C`;

			if (realFeelTemperature) {
				wS += `, ü§í ${realFeelTemperature}¬∞C`;
			}

			if (wind) {
				wS += `, üí® ${wind} –º/—Å`;
			}

			return wS;
		}, "");

		return weatherString;
	}

	static sendError(chatId: number) {
		bot.sendMessage(chatId, `–ü–æ–º–∏–ª–æ—á–∫–∞  ¬Ø\\_(„ÉÑ)_/¬Ø`);
	}

	static sendLoading(chatId: number) {
		bot.sendMessage(chatId, `–ß–µ–∫–∞–π—Ç–µ, –∑–±–∏—Ä–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é...`, {
			reply_markup: {
				remove_keyboard: true,
			},
		});
	}

	async onMessage(msg: Message) {
		const text = msg.text;
		const chatId = msg.chat.id;

		try {
			if (text === "/start") {
				return bot.sendMessage(
					chatId,
					`–í—ñ—Ç–∞—é –≤ —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç—ñ –ø–æ–≥–æ–¥–∏, —Å–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ—Å—è –∫–Ω–æ–ø–∫–æ—é "–ú–µ–Ω—é", —â–æ–± —â–æ—Å—å –∑—Ä–æ–±–∏—Ç–∏`,
				);
			}

			if (text === "/kyiv") {
				BotController.sendLoading(chatId);

				const KyivWeathers = await WeatherService.getAllKyivWeathers();

				if (!KyivWeathers.length) {
					return BotController.sendError(chatId);
				}

				return bot.sendMessage(
					chatId!,
					BotController.weathersToString("–ö–∏—ó–≤", KyivWeathers),
					{
						parse_mode: "Markdown",
					},
				);
			}

			if (text === "/location") {
				bot.sendMessage(
					chatId!,
					`–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ª–æ–∫–∞—Ü—ñ—é, —è–∫–∞ –≤–∞—Å —Ü—ñ–∫–∞–≤–∏—Ç—å\n–∞–±–æ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –≤–Ω–∏–∑—É, —â–æ–± –ø–æ–¥—ñ–ª–∏—Ç–∏—Å—è –≤–∞—à–µ—é –ª–æ–∫–∞—Ü—ñ—î—é\n(–ó–∞–¥—ñ—è–Ω–æ –º–µ–Ω—à–µ –¥–∂–µ—Ä–µ–ª)`,
					{
						parse_mode: "Markdown",
						reply_markup: {
							one_time_keyboard: true,
							resize_keyboard: true,
							keyboard: [[{ text: "–ú–æ—è –ª–æ–∫–∞—Ü—ñ—è", request_location: true }]],
						},
					},
				);
			}
		} catch (e) {
			console.log(e);
		}
	}

	async onLocation(msg: Message) {
		const location = msg.location;
		const chatId = msg.chat.id;

		if (!location) {
			return BotController.sendError(chatId);
		}

		BotController.sendLoading(chatId);

		const weathers = await WeatherService.getWeathers(
			location.latitude,
			location.longitude,
		);

		if (!weathers.length) {
			return BotController.sendError(chatId);
		}

		return bot.sendMessage(
			chatId!,
			BotController.weathersToString("", weathers),
			{
				parse_mode: "Markdown",
			},
		);
	}
}

export default new BotController();
